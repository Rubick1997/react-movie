{"version":3,"sources":["Components/Header.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","text","useState","isOpen","setIsOpen","Navbar","color","light","expand","Container","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","Search","isKetik","setIsKetik","input","setInput","RequestAPI","a","fetch","req","json","res","console","log","target","document","getElementById","undefined","map","item","innerHTML","Poster","Title","Year","Input","type","name","id","placeholder","onKeyUp","e","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kVA0DeA,EAzCA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACCC,oBAAS,GADV,mBACpBC,EADoB,KACZC,EADY,KAK3B,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,eACA,kBAACC,EAAA,EAAD,CAAeC,QAPR,kBAAMT,GAAWD,MAQxB,kBAACW,EAAA,EAAD,CAAUX,OAAQA,EAAQY,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,gBAAgBV,IAEhC,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,4CAAd,WAIF,kBAACS,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,WAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,CAAcC,SAAO,IACrB,kBAACD,EAAA,EAAD,iBAIN,kBAACE,EAAA,EAAD,yB,iCCUGC,EA/CA,WACb,IADmB,EAEW5B,oBAAS,GAFpB,mBAEZ6B,EAFY,KAEHC,EAFG,OAGO9B,mBAAS,IAHhB,mBAGZ+B,EAHY,KAGLC,EAHK,KAKbC,EAAU,uCAAG,gCAAAC,EAAA,sEACCC,MAAM,GAAD,OALT,2CAKS,cAAiBJ,IADvB,cACXK,EADW,gBAECA,EAAIC,OAFL,UAEXC,EAFW,OAGjBC,QAAQC,IAAIF,GACNG,EAASC,SAASC,eAAe,cACpBC,IAAfN,EAAIV,OALS,iBAMfU,EAAIV,OAAOiB,KAAI,SAACC,GACdL,EAAOM,WAAP,+CACMD,EAAKE,OADX,oGAGqBF,EAAKG,MAH1B,2CAImBH,EAAKI,KAJxB,uFAPa,iDAiBR,cAjBQ,4CAAH,qDAqBhB,OACE,oCACE,kBAAC3C,EAAA,EAAD,KACE,kBAAC4C,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,OACLC,GAAG,OACHvC,UAAU,OACVwC,YAAY,YACZC,QAAS,SAACC,GACRzB,EAASyB,EAAEhB,OAAOiB,OAClB5B,GAAW,GACXG,QAGS,IAAZJ,EAAoB,6BAASyB,GAAG,UAAqB,QC1C/CK,MATf,WACE,OACE,oCACE,kBAAC,EAAD,CAAQ5D,KAAK,SACb,kBAAC,EAAD,QCKc6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDwHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.6a94cebc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText,\n  Container,\n} from \"reactstrap\";\n\nconst Header = ({ text }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <Container>\n          <NavbarBrand href=\"/\">MovieSearch</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/components/\">{text}</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">\n                  GitHub\n                </NavLink>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Options\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>Option 1</DropdownItem>\n                  <DropdownItem>Option 2</DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem>Reset</DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n            <NavbarText>Simple Text</NavbarText>\n          </Collapse>\n        </Container>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport {\n  Input,\n  Container,\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n} from \"reactstrap\";\n\nconst Search = () => {\n  const baseUrl = \"https://www.omdbapi.com/?apikey=86ff7111\";\n  const [isKetik, setIsKetik] = useState(false);\n  const [input, setInput] = useState(\"\");\n\n  const RequestAPI = async () => {\n    const req = await fetch(`${baseUrl}&s=${input}`);\n    const res = await req.json();\n    console.log(res);\n    const target = document.getElementById(\"hasil\");\n    if (res.Search !== undefined) {\n      res.Search.map((item) => {\n        target.innerHTML += `<div class=\"card mt-4\">\n  <img src=\"${item.Poster}\" class=\"card-img-top\" alt=\"...\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">${item.Title}</h5>\n    <p class=\"card-text\">${item.Year}</p>\n    <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n  </div>\n</div>`;\n      });\n    } else {\n      return \"Loading...\";\n    }\n  };\n\n  return (\n    <>\n      <Container>\n        <Input\n          type=\"text\"\n          name=\"cari\"\n          id=\"cari\"\n          className=\"mt-4\"\n          placeholder=\"Cari Film\"\n          onKeyUp={(e) => {\n            setInput(e.target.value);\n            setIsKetik(true);\n            RequestAPI();\n          }}\n        />\n        {isKetik !== false ? <section id=\"hasil\"></section> : null}\n      </Container>\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport Search from \"./Components/Search\";\nfunction App() {\n  return (\n    <>\n      <Header text=\"Home\" />\n      <Search />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}